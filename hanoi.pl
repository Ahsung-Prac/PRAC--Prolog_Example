hanoi(N) :-
	move(N, 1, 2,3). 

/*위의 탑(원판)이 더이상 없으면 그냥 true 반환 */
move(0, _, _, _) :-!. 


/* N은 크기가 1~N의 원탑이 모두 쌓인 탑을 의미한다. */
/* move는 N을 S(출발지)에서 D(도착지)로 옮긴다. */
/* 이때 E는 빈공간, 혹은 N보다 큰 원판이 있는 곳*/
move(N, S, D, E) :-
	N2 is N-1, 	      /* 자신 위의 탑! N2 */
	move(N2, S, E, D),    /* 원판 N을 D로 놓기 위해선 탑 N2를 E로 치워 놓아야 한다! */
	print(N, S, D),       /* 이제 원판 N을 목적 D에 옮긴다. ! */	
	move(N2, E, D, S).    /* E로 치웠던 탑N2를 다시 D옮겨 자신의 위에 쌓는다.! */

/*즉 원판을 옮기기 위해서 위의 탑을 옮겨야 하며*/
/*다시 그 위의 탑을 옮기기 위해서 탑 = 원판 이 되는 순간까지*/
/*재귀적으로 반복하여 실행한다!*/
/* N 원판을 옮겼으면 다시 치웠던 N2 탑을 N원판 위로 쌓아야 한다!*/
/*이때 N2탑은 나머지 자리가 N2탑의 모든원판보다 넓으므로*/
/*move함수를 써서 충분히 다시 N원판 위로  옮길 수 있다.*/			      

/* 이동 상태 출력 함수 */
print(N,S,D) :-
	write(N),write("->"),
	write([S,D]), nl.			

